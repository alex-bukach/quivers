<?php

namespace Drupal\quivers\Form;

use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Messenger\MessengerInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\quivers\QuiversCloudhubService;
use Drupal\quivers\QuiversMiddlewareService;

/**
 * Configuration form for Quivers settings.
 */
class ConfigSettingsForm extends ConfigFormBase {

  /**
   * The messenger.
   *
   * @var \Drupal\Core\Messenger\MessengerInterface
   */
  protected $messenger;

  /**
   * The Quivers Middleware Service.
   *
   * @var \Drupal\quivers\Form\QuiversMiddlewareService
   */
  protected $quiversMiddlewareService;

  /**
   * The Quivers Service.
   *
   * @var \Drupal\quivers\Form\QuiversCloudhubService
   */
  protected $quiversCloudhubService;

  /**
   * Constructs a ConfigSettingsForm object.
   *
   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
   *   The factory for configuration objects.
   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
   *   The messenger.
   * @param \Drupal\quivers\Form\QuiversMiddlewareService $quivers_middleware_service
   *   The Quivers Middleware Service.
   * @param \Drupal\quivers\Form\QuiversCloudhubService $quivers_cloudhub_service
   *   The Quivers Cloudhub Service.
   */
  public function __construct(ConfigFactoryInterface $config_factory, MessengerInterface $messenger, QuiversMiddlewareService $quivers_middleware_service, QuiversCloudhubService $quivers_cloudhub_service) {
    parent::__construct($config_factory);
    $this->messenger = $messenger;
    $this->quiversMiddlewareService = $quivers_middleware_service;
    $this->quiversCloudhubService = $quivers_cloudhub_service;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('config.factory'),
      $container->get('messenger'),
      $container->get('quivers.quivers_middleware_service'),
      $container->get('quivers.quivers_cloudhub_service')
    );
  }

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    return 'quivers_config_settings';
  }

  /**
   * {@inheritdoc}
   */
  protected function getEditableConfigNames() {
    return ['quivers.settings'];
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $config = $this->config('quivers.settings');

    // Plugin Environment Configuration.
    $form['environment_configuration'] = [
      '#type' => 'details',
      '#title' => $this->t('Environment Configuration'),
      '#open' => TRUE,
      '#id' => 'environment-configuration-wrapper',
    ];
    $form['environment_configuration']['api_mode'] = [
      '#type' => 'radios',
      '#title' => $this->t('API mode:'),
      '#default_value' => $config->get('api_mode'),
      '#options' => [
        'development' => $this->t('Development'),
        'production' => $this->t('Production'),
      ],
      '#required' => TRUE,
      '#description' => $this->t('The mode to use when connecting to Quivers.'),
    ];

    // Quivers Middleware Configuration.
    $form['profile_configuration'] = [
      '#type' => 'details',
      '#title' => $this->t('Profile Configuration'),
      '#open' => TRUE,
      '#id' => 'profile-configuration-wrapper',
    ];
    $form['profile_configuration']['business_refid'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Business RefId:'),
      '#default_value' => $config->get('business_refid'),
      '#required' => TRUE,
      '#description' => $this->t('Quivers profile Business RefId.'),
    ];
    $form['profile_configuration']['quivers_api_key'] = [
      '#type' => 'textfield',
      '#title' => $this->t('API Key:'),
      '#default_value' => $config->get('quivers_api_key'),
      '#required' => TRUE,
      '#description' => $this->t('Quivers profile API Key.'),
    ];
    $form['profile_configuration']['drupal_api_base_url'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Drupal API Base URL:'),
      '#default_value' => $config->get('drupal_api_base_url'),
      '#required' => TRUE,
      '#description' => $this->t('Drupal REST base URL e.g. https://sandbox.something.com'),
    ];
    $form['profile_configuration']['consumer_key'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Consumer Key:'),
      '#default_value' => $config->get('consumer_key'),
      '#required' => TRUE,
      '#description' => $this->t('Consumer Key generated by creating OAuth Consumer.'),
    ];
    $form['profile_configuration']['consumer_secret'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Consumer Secret:'),
      '#default_value' => $config->get('consumer_secret'),
      '#required' => TRUE,
      '#description' => $this->t('Consumer Secret generated by creating OAuth Consumer.'),
    ];

    return parent::buildForm($form, $form_state);
  }

  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {
    parent::validateForm($form, $form_state);
    $values = $form_state->getValues();

    // Create Quivers Middleware Profile.
    try {
      $middleware_profile_id = $this->quiversMiddlewareService->profileCreate($values);
      $this->config('quivers.settings')
        ->set('middleware_profile_id', $middleware_profile_id)
        ->save();
    }
    catch (\Exception $e) {
      $form_state->setError($form['profile_configuration'], 'Unable to sync Quivers Profile - ' . $e->getMessage());
      return;
    }
    $this->messenger->addMessage($this->t('Quivers Profile Synced successfully.'));
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    $values = $form_state->getValues();
    // Get Quivers Product Groups.
    try {
      $quivers_product_groups = $this->quiversCloudhubService->getQuiversProductGroups($values);
    }
    catch (\Exception $e) {
      $form_state->setError(
        $form['profile_configuration'], 'Unable to fetch Quivers Marketplaces - ' . $e->getMessage());
      return;
    }

    $this->config('quivers.settings')
      ->set('api_mode', $form_state->getValue('api_mode'))
      ->set('business_refid', $form_state->getValue('business_refid'))
      ->set('quivers_api_key', $form_state->getValue('quivers_api_key'))
      ->set('drupal_api_base_url', $form_state->getValue('drupal_api_base_url'))
      ->set('consumer_key', $form_state->getValue('consumer_key'))
      ->set('consumer_secret', $form_state->getValue('consumer_secret'))
      ->set('quivers_marketplaces', $quivers_product_groups['quivers_marketplaces'])
      ->set('quivers_claiming_groups', $quivers_product_groups['quivers_claiming_groups'])
      ->save();

    parent::submitForm($form, $form_state);
  }

}
